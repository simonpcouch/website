{
  "hash": "df4732ad07f5e09941bf9847ee9c7b33",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introducing chores\"\ndate: '2025-04-11'\ntags:\n  - ai\n  - ellmer\n  - rstats\nsubtitle: \"A package to help with repetitive but hard-to-automate data science tasks.\"\nimage: featured.png\nsummary: ''\nexecute: \n  warning: false\n  message: false\n---\n\n\n\n\n\n:::callout-note\nThe following is a cross-post of a post I put together for the Posit Blog; you can read that post [here](https://posit.co/blog/introducing-chores/).\n:::\n\n----\n\n<a href=\"https://simonpcouch.github.io/chores/\"><img src=\"figures/chores-hex.png\" alt=\"The package hex sticker; a yellow blog happily holding a checklist on a purple background.\" align=\"right\" height=\"240\"/></a>\n\nWhat's a 1-minute data science task you do all of the time? Could you teach another data scientist to do it with a couple paragraphs of explanation and an example or two? If so, you might benefit from checking out [chores](https://simonpcouch.github.io/chores/), a new package that helps you with tedious but hard-to-automate tasks.\n\nchores followed up on the initial release of [ellmer](https://ellmer.tidyverse.org/), a package that makes it easy to use large language models (LLMs) from R. The package connects ellmer to your source editor in RStudio and Positron via a collection of chore helpers.\n\n::: callout-note\nchores used to be called pal.\n:::\n\n## Example\n\nAs an R package developer, one thing I do many times a day is write R function documentation using [roxygen2](https://roxygen2.r-lib.org/). For example, imagine I'm working on this function:\n\n![A screenshot of an RStudio session.](figures/1-source.png)\n\n\n\n\n\n\n\nThe function grabs the value of an environmental variable, providing a nicely formatted error message if it can't find it. For example, the `HOME` environmental variable shows my home folder on macOS:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey_get(\"HOME\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/simoncouch\"\n```\n\n\n:::\n:::\n\n\n\nThis variable doesn't exist, though:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkey_get(\"IM_A_SILLY_GOOSE\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError:\n! Can't find env var `IM_A_SILLY_GOOSE`.\n```\n\n\n:::\n:::\n\n\n\nThis function is ready to export from my package. So, the next step is to write inline documentation using roxygen2. Before I can write about how this function is connected to other topics in my package and any interesting notes about how it can be used, there's 100-characters-or-so of boilerplate that basically follows directly from the source code of the function. e.g. there are two arguments—`name`and `error_call`—and one of them has a default argument, and so on. That will take me a minute or so to type out, and I won't really enjoy doing so.\n\nWhat if I didn't have to? The chores package supplies a helper for this task: scaffolding out minimal roxygen2 documentation.\n\n\n\n{{< video figures/chore-roxygen.mov >}}\n\n\n\n\nIn the above video, I:\n\n-   Select my function,\n\n-   Press a keyboard shortcut,\n\n-   Select the \"roxygen\" helper from a dropdown, and\n\n-   Press \\[Enter\\]\n\nAt that point, inline roxygen2 comments begin streaming into my document about my function. Notably, the output is quite minimal; the `@param` entries just give the argument name and a description of their type, there's a brief `@returns` section, and an `@export` tag. These are the bits of roxygen2 boilerplate that I would likely have written almost exactly the same if I had done so myself. Once this boilerplate is in place, I can check over it and add notes on the interesting parts of what the function does. This is a minute worth of work I wouldn't particularly enjoy doing—and that would otherwise be quite difficult to automate without LLMs—done for me.\n\n## How it works\n\nThe chores package manages a directory of markdown files, each of which contains instructions on how to do a certain task, or \"prompts.\" Here's the current prompt associated with the roxygen chore:\n\n\n\n\n::: {.cell}\n\n```{.md .cell-code  code-fold=\"true\" code-summary=\"Show the code: `roxygen-chore-prompt.md`\"}\n# Templating function documentation\n\nYou are a terse assistant designed to help R package developers quickly template out their function documentation using roxygen2. Given some highlighted function code, return minimal documentation on the function's parameters and return type. Beyond those two elements, be sparing so as not to describe things you don't have context for. Respond with *only* R `#'` roxygen2 comments---no backticks or newlines around the response, no further commentary.\n\nFor function parameters in `@params`, describe each according to their type (e.g. \"A numeric vector\" or \"A single string\") and note if the parameter isn't required by writing \"Optional\" if it has a default value. If the parameters have a default enum (e.g. `arg = c(\"a\", \"b\", \"c\")`), write them out as 'one of `\"a\"`, `\"b\"`, or `\"c\"`.' If there are ellipses in the function signature, note what happens to them. If they're checked with `rlang::check_dots_empty()` or otherwise, document them as \"Currently unused; must be empty.\" If the ellipses are passed along to another function, note which function they're passed to.\n\nFor the return type in `@returns`, note any important errors or warnings that might occur and under what conditions. If the `output` is returned with `invisible(output)`, note that it's returned \"invisibly.\"\n\nHere's an example:\n\n# given:\nkey_get <- function(name, error_call = caller_env()) {\n  val <- Sys.getenv(name)\n  if (!identical(val, \"\")) {\n    val\n  } else {\n    if (is_testing()) {\n      testthat::skip(sprintf(\"%s env var is not configured\", name))\n    } else {\n      cli::cli_abort(\"Can't find env var {.code {name}}.\", call = error_call)\n    }\n  }\n}\n\n# reply with:\n#' Get key\n#'\n#' @description\n#' A short description...\n#' \n#' @param name A single string.\n#' @param error_call A call to mention in error messages. Optional.\n#'\n#' @returns \n#' If found, the value corresponding to the provided `name`. Otherwise,\n#' the function will error.\n#'\n#' @export\n\nAnother:\n\n# given:\nchat_perform <- function(provider,\n                         mode = c(\"value\", \"stream\", \"async-stream\", \"async-value\"),\n                         turns,\n                         tools = list(),\n                         extra_args = list()) {\n\n  mode <- arg_match(mode)\n  stream <- mode %in% c(\"stream\", \"async-stream\")\n\n  req <- chat_request(\n    provider = provider,\n    turns = turns,\n    tools = tools,\n    stream = stream,\n    extra_args = extra_args\n  )\n\n  switch(mode,\n    \"value\" = chat_perform_value(provider, req),\n    \"stream\" = chat_perform_stream(provider, req),\n    \"async-value\" = chat_perform_async_value(provider, req),\n    \"async-stream\" = chat_perform_async_stream(provider, req)\n  )\n}\n\n# reply with:\n#' Perform chat\n#'\n#' @description\n#' A short description...\n#' \n#' @param provider A provider.\n#' @param mode One of `\"value\"`, `\"stream\"`, `\"async-stream\"`, or `\"async-value\"`.\n#' @param turns Turns.\n#' @param tools Optional. A list of tools.\n#' @param extra_args Optional. A list of extra arguments.\n#'\n#' @returns \n#' A result.\n#'\n#' @export\n\n# given:\ncheck_args <- function(fn, ...) {\n  rlang::check_dots_empty()\n  arg_names <- names(formals(fn))\n  if (length(arg_names) < 2) {\n    cli::cli_abort(\"Function must have at least two arguments.\", .internal = TRUE)\n  } else if (arg_names[[1]] != \"self\") {\n    cli::cli_abort(\"First argument must be {.arg self}.\", .internal = TRUE)\n  } else if (arg_names[[2]] != \"private\") {\n    cli::cli_abort(\"Second argument must be {.arg private}.\", .internal = TRUE)\n  }\n  invisible(fn)\n}\n\n# reply with:\n#' Check a function's arguments\n#'\n#' @description\n#' A short description...\n#' \n#' @param fn A function.\n#' @param ... Currently unused; must be empty.\n#'\n#' @returns \n#' `fn`, invisibly. The function will instead raise an error if the function\n#' doesn't take first argument `self` and second argument `private`.\n#'\n#' @export\n\nWhen two functions are supplied, only provide documentation for the first function, only making use of later functions as additional context. For example:\n\n# given:\ncheck_args <- function(fn, ...) {\n  rlang::check_dots_empty()\n  arg_names <- names(formals(fn))\n  if (length(arg_names) < 2) {\n    error_less_than_two_args()\n  } else if (arg_names[[1]] != \"self\") {\n    cli::cli_abort(\"First argument must be {.arg self}.\", .internal = TRUE)\n  } else if (arg_names[[2]] != \"private\") {\n    cli::cli_abort(\"Second argument must be {.arg private}.\", .internal = TRUE)\n  }\n  invisible(fn)\n}\n\nerror_less_than_two_args <- function(call = caller_env()) {\n  cli::cli_abort(\"Function must have at least two arguments.\", call = call, .internal = TRUE)\n}\n \n# reply with:\n#' Check a function's arguments\n#'\n#' @description\n#' A short description...\n#' \n#' @param fn A function.\n#' @param ... Currently unused; must be empty.\n#'\n#' @returns \n#' `fn`, invisibly. The function will instead raise an error if the function\n#' doesn't take first argument `self` and second argument `private`.\n#'\n#' @export\n```\n:::\n\n\n\nWhen a prompt file lives in the chores directory, the name of the file appears in that dropdown shown in the video. Then, when you select a chore from the dropdown, its associated prompt is submitted to the model along with the code selection you've made using ellmer. The response from the model is then written to your file as it's received.\n\n::: callout-note\nIf you're an ellmer user, here's what it'd look like if you wrote the above request out manually:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ellmer)\n\nch <- chat_claude(system_prompt = the_prompt_above)\n \nch$chat(\"The selected code.\")\n```\n:::\n\n\n:::\n\n## What's possible\n\nThe [roxygen helper](https://simonpcouch.github.io/chores/reference/roxygen_helper.html) is one of three helpers supplied with the chores package. There's also a [testthat helper](https://simonpcouch.github.io/chores/reference/testthat_helper.html), which transitions unit testing code to the third edition of testthat, and a [cli helper](https://simonpcouch.github.io/chores/reference/cli_helper.html), which transitions erroring code to use the cli package. These three helpers that ship with the package are focused on R package development, as that's where I've gotten the most mileage out of the interface.\n\nThat said, the package allows you to [write your own helpers](https://simonpcouch.github.io/chores/articles/custom.html), and all that that takes is a couple paragraphs and an example or two in a markdown file. The [chores gallery](https://simonpcouch.github.io/chores/articles/gallery.html) highlights various custom helpers folks have written since the package came to be:\n\n<iframe \n  src=\"https://simonpcouch.github.io/chores/articles/gallery.html\" \n  width=\"100%\" \n  height=\"500px\" \n  style=\"border: 1px solid #ddd; border-radius: 10px; overflow: auto; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\">\n  Your browser does not support iframes.\n</iframe>\n\nFor example, Hannah Frick wrote [a helper to migrate code chunk options](https://gist.github.com/hfrick/1ca8fc2cb2a4409b743e8120c6cc2223) from R Markdown to Quarto format, and Hadley Wickham wrote [a helper to polish NEWS changelogs](https://gist.github.com/simonpcouch/8dbb3cd1fd79f9525bc1476d6fa7b668) before package releases. If you write your own helper prompt and would like it to be featured in the gallery, I'd be glad to review your pull request!\n\n## Other ellmer delights\n\nWorking on ellmer-based packages really helped me begin to wrap my head around what LLMs are capable of. Provided the right pieces of context and given access to the right tools, they can make the practice of developing software a much more enjoyable experience. It's been neat to see others in the #rstats community making use of ellmer, too; I wanted to call out a few ellmer-related bits and bobs that I've come across recently.\n\nFor one, Dr. Athanasia Mo Mowinckel wrote up some great reflections on the struggles of using tools like chores with local ollama models in [a recent blog post](https://drmowinckels.io/blog/2025/ollama/). We're not quite there yet, but I'm hopeful we will be soon.\n\n<img src=\"figures/crias-logo.jpg\" alt=\"Four cartoon animal characters standing in adventurer outfits against a backdrop of mountainous terrain and ancient ruins. The game's name is displayed in stylized text above them.\" align=\"right\" height=\"200\" style=\"border-radius: 10px;\"/></a>\n\nAnother one is [crias](https://github.com/frankiethull/crias), a turn-based adventure game from Frank Hull. In his words:\n\n> It is built with the idea of using an LLM as a “Game Moderator”. Currently has one GM called “Pachamama”. The other aspect is using LLMs as players in your “party”. Many LLMs have names like “llama”, “vicuna”, “alpaca”; this game is built on the idea of leading your “party” aka “herd” in a llama-centric journey set in an Andean-inspired world.\n\n<img src=\"figures/gander-hex.png\" align=\"right\" height=\"240\" alt=\"The hex sticker for the gander package: a cartoonish goose swims on a green background with a blue 'reflection' below it.\"/></a>\n\nNot to toot my own horn, but I've also written about another ellmer-based tool that I built recently—[gander](https://simonpcouch.github.io/gander/)—on [a post on the Posit Blog](https://posit.co/blog/introducing-gander/). gander is a coding assistant that knows about the objects in your R environment, resulting in more accurate completions.\n\nI've had a lot of fun working with ellmer and am excited to share about more ellmer-based tools soon.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}