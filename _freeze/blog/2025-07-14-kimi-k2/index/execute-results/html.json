{
  "hash": "09c2ad28d3112670f28bfee7259ec4b3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Kimi K2 and R Coding\"\ndate: '2025-07-14'\ntags:\n  - ai\n  - vitals\n  - rstats\nsubtitle: \"An open-weights model released over the weekend by a little-known company has drawn quite a bit of attention. Is it any good?\"\nimage: featured.png\nsummary: ''\n---\n\n\n\n\n\nIt was a hoot and a half of a weekend in the LLM world. A company I hadn't heard of called Moonshot AI released a model called [Kimi K2](https://moonshotai.github.io/Kimi-K2/). From 30,000 feet:\n\n-   It's open-weights.[^1] As in, if it wasn't a huge model, you could just download the model and run it on your laptop.\n-   It hangs out near the top of many of the most notable benchmarks, alongside models like Claude Opus 4 and GPT 4.1, in a way that no other \"open\" model has since Deepseek.[^2] As is the case with any LLM release, high benchmarks don't necessarily imply real utility, but the model's numbers were enough to draw the attention of many folks in the space.\n-   It's not a reasoning model, which is where much attention is otherwise being paid at the moment. I'd guess the folks at Moonshot are cooking on a reasoning variant of the model as we speak.\n\n[^1]: Some asterisks here with the licensing.\n\n[^2]: Well, Llama 4, but yikes.\n\nAlso, their [release post](https://moonshotai.github.io/Kimi-K2/) includes a supposedly-one-shotted Javascript Minecraft clone? Can this please be a thing from now on?\n\n![](js_minecraft.png){style=\"border-radius: 10px; box-shadow: 0 5px 10px rgba(0, 0, 0, 0.15);\"}\n\n<br>\n\n<a href=\"https://vitals.tidyverse.org/\"><img src=\"vitals.png\" alt=\"The hex sticker for the vitals package: a teddy bear in blue scrubs happily holding a stethoscope.\" align=\"right\" height=\"240\"/></a>\n\nIn this post, we'll put this model through its paces on some R coding tasks using the newly-on-CRAN [vitals R package](https://vitals.tidyverse.org/) for LLM evaluation. First, I'll show how to use [ellmer](https://ellmer.tidyverse.org) to connect to \"unsupported\" models. Then, we'll load in [An R Eval](https://vitals.tidyverse.org/reference/are.html), a dataset of challenging R coding problems. We'll let Kimi K2 take a crack at each of the problems, and then compare how well it does to a few other leading models.\n\n::: callout-note\nThis post is part of a [series](https://www.simonpcouch.com/blog/2025-05-21-gemini-2-5-flash/) [of](https://www.simonpcouch.com/blog/2025-05-07-gemini-2-5-pro-new/) [blog](https://www.simonpcouch.com/blog/2025-04-18-o3-o4-mini/) [posts](https://www.simonpcouch.com/blog/2025-04-15-gpt-4-1/) where I evaluate new LLM releases on their R coding performance. In this post, I'll skip over all of the evaluation code and just make some graphs; if you're interested in learning more about how to run an eval like this one, check out the post [Evaluating o3 and o4-mini on R coding performance](https://www.simonpcouch.com/blog/2025-04-18-o3-o4-mini/).\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ellmer)\nlibrary(vitals)\nlibrary(tidyverse)\nlibrary(ggrepel)\n```\n:::\n\n\n\n## Connecting to Kimi K2 with ellmer\n\nSince this Kimi series of models is a relatively new player, the [ellmer](https://ellmer.tidyverse.org/) R package doesn't yet have \"official\" support for the model. However, Moonshot's API uses the OpenAI spec, meaning that we can just make use of ellmer's support for OpenAI to interact with the model by changing the `base_url`, `api_key`, and default `model`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchat_moonshot <- function(\n  system_prompt = NULL, \n  base_url = \"https://api.moonshot.ai/v1\", \n  api_key = Sys.getenv(\"MOONSHOT_API_KEY\"), \n  model = \"kimi-k2-0711-preview\", \n  ...\n) {\n  chat_openai(\n    system_prompt = system_prompt,\n    base_url = base_url, \n    api_key = api_key, \n    model = model, \n    ...\n  )\n}\n\n\nch <- chat_moonshot()\nch$chat(\"hey!\")\n#> Hey! What’s up?\n```\n:::\n\n\n\n:::callout-note\nWhile the API is advertised as OpenAI-compatible, it has some small modifications that result in 400 Errors occasionally. I switched out `chat_deepseek()` for `chat_openai()` in the above and resolved most of them.\n:::\n\nI had to [sign up for an API key](https://platform.moonshot.ai/console/api-keys) and put a dollar on it to run this eval. This model seems [quite cheap](https://platform.moonshot.ai/docs/pricing/chat#concepts) compared to the models it's being likened to, so I'll also run it against some models that are closer in pricing:\n\n| Model | Input Price | Output Price |\n|-------|-------------|--------------|\n| Kimi K2 | $0.60 | $2.50 |\n| Claude 4 Sonnet | $3.00 | $15.00 |\n| Claude 4 Opus | $15.00 | $75.00 |\n| GPT-4.1 | $2.00 | $8.00 |\n| GPT-4.1 mini | $0.40 | $1.60 |\n| Gemini 2.5 Flash | $0.30 | $2.50 |\n\nBeing able to wrap the OpenAI API this easily is so nice, and their API key flow was easy peasy. Google Gemini, take notes.\n\n## Evaluating the model\n\nTo evaluate the model, we define a chat instance for the solver (Kimi K2) and scorer (Claude 3.7 Sonnet), set up an evaluation Task object, and then run `$eval()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclaude_3_7_sonnet <- chat_anthropic(model = \"claude-3-7-sonnet-latest\")\nkimi_k2 <- chat_moonshot()\n\nare_task <- Task$new(\n  dataset = are,\n  solver = generate(),\n  scorer = model_graded_qa(\n    scorer_chat = claude_3_7_sonnet, \n    partial_credit = TRUE\n  ),\n  epochs = 3,\n  name = \"An R Eval\"\n)\n\nare_task$eval(solver_chat = kimi_k2)\n```\n:::\n\n\n\nI'm writing this on a Sunday, so take this with a grain of salt, but the API was _snappy_. No issues. We'll see how that holds up tomorrow, when I'll send this out.^[Spoiler: it was slower.]\n\nIt costed about 7 cents to run this eval against Kimi K2.\n\n<details>\n\n<summary>Full evaluation code here</summary>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclaude_4_sonnet <- chat_anthropic(model = \"claude-sonnet-4-20250514\")\nclaude_4_opus <- chat_anthropic(model = \"claude-opus-4-20250514\")\nclaude_3_7_sonnet <- chat_anthropic(model = \"claude-3-7-sonnet-latest\")\ngpt_4_1 <- chat_openai(model = \"gpt-4.1\")\ngpt_4_1_mini <- chat_openai(model = \"gpt-4.1-mini\")\ngemini_2_5_flash <- chat_google_gemini(\n  model = \"gemini-2.5-flash\",\n  api_args = list(\n    generationConfig = list(\n      thinkingConfig = list(\n        thinkingBudget = 0\n        )\n      )\n    )\n)\nkimi_k2 <- chat_moonshot()\n\nare_task <- Task$new(\n  dataset = are,\n  solver = generate(),\n  scorer = model_graded_qa(\n    scorer_chat = claude_3_7_sonnet, \n    partial_credit = TRUE\n  ),\n  epochs = 3,\n  name = \"An R Eval\"\n)\n\nare_task\n\nare_claude_4_sonnet <- are_task$clone()\nare_claude_4_sonnet$eval(solver_chat = claude_4_sonnet)\nsave(are_claude_4_sonnet, file = \"blog/2025-07-14-kimi-k2/tasks/are_claude_4_sonnet.rda\")\n\nare_claude_4_opus <- are_task$clone()\nare_claude_4_opus$eval(solver_chat = claude_4_opus)\nsave(are_claude_4_opus, file = \"blog/2025-07-14-kimi-k2/tasks/are_claude_4_opus.rda\")\n\nare_claude_4_opus <- are_task$clone()\nare_claude_4_opus$eval(solver_chat = claude_4_opus)\nsave(are_claude_4_opus, file = \"blog/2025-07-14-kimi-k2/tasks/are_claude_4_opus.rda\")\n\nare_gpt_4_1 <- are_task$clone()\nare_gpt_4_1$eval(solver_chat = gpt_4_1)\nsave(are_gpt_4_1, file = \"blog/2025-07-14-kimi-k2/tasks/are_gpt_4_1.rda\")\n\nare_gpt_4_1_mini <- are_task$clone()\nare_gpt_4_1_mini$eval(solver_chat = gpt_4_1_mini)\nsave(are_gpt_4_1_mini, file = \"blog/2025-07-14-kimi-k2/tasks/are_gpt_4_1_mini.rda\")\n\nare_gemini_2_5_flash <- are_task$clone()\nare_gemini_2_5_flash$eval(solver_chat = gemini_2_5_flash)\nsave(are_gemini_2_5_flash, file = \"blog/2025-07-14-kimi-k2/tasks/are_gemini_2_5_flash.rda\")\n\nare_kimi_k2 <- are_task$clone()\nare_kimi_k2$eval(solver_chat = kimi_k2)\nsave(are_kimi_k2, file = \"blog/2025-07-14-kimi-k2/tasks/are_kimi_k2.rda\")\n```\n:::\n\n\n\n</details>\n\nYou can view the raw results of the evaluation in this interactive viewer:\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<iframe src=\"/assets/2025-07-14-kimi-k2/viewer/index.html\" width=\"100%\" height=\"600px\" style=\"border-radius: 10px; box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);\"></iframe>\n```\n\n:::\n:::\n\n\n\n::: callout-note\nWhile the total durations of the evaluations are correct in the viewer, the timings of specific samples are now estimated. Given some changes in downstream packages, vitals has to estimate how long a given request takes rather than receiving the exact duration; this will be resolved down the line.\n:::\n\n## Analysis\n\nAt this point, we have access to `are_eval`, a data frame containing all of the results collected during the evaluation.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nare_eval\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 504 × 5\n   model   id                          epoch score metadata         \n   <fct>   <chr>                       <int> <ord> <list>           \n 1 Kimi K2 after-stat-bar-heights          1 I     <tibble [1 × 10]>\n 2 Kimi K2 after-stat-bar-heights          2 I     <tibble [1 × 10]>\n 3 Kimi K2 after-stat-bar-heights          3 I     <tibble [1 × 10]>\n 4 Kimi K2 conditional-grouped-summary     1 I     <tibble [1 × 10]>\n 5 Kimi K2 conditional-grouped-summary     2 I     <tibble [1 × 10]>\n 6 Kimi K2 conditional-grouped-summary     3 I     <tibble [1 × 10]>\n 7 Kimi K2 correlated-delays-reasoning     1 C     <tibble [1 × 10]>\n 8 Kimi K2 correlated-delays-reasoning     2 I     <tibble [1 × 10]>\n 9 Kimi K2 correlated-delays-reasoning     3 P     <tibble [1 × 10]>\n10 Kimi K2 curl-http-get                   1 P     <tibble [1 × 10]>\n# ℹ 494 more rows\n```\n\n\n:::\n:::\n\n\n\nThe evaluation scores each answer as \"Correct\", \"Partially Correct\", or \"Incorrect\". We can use a bar chart to visualize the proportions of responses that fell into each of those categories:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nare_eval %>%\n  mutate(\n    score = fct_recode(\n      score, \n      \"Correct\" = \"C\", \"Partially Correct\" = \"P\", \"Incorrect\" = \"I\"\n    ),\n    model = fct_rev(model)\n  ) %>%\n  ggplot(aes(y = model, fill = score)) +\n  geom_bar(position = \"fill\") +\n  scale_fill_manual(\n    breaks = rev,\n    values = c(\"Correct\" = \"#67a9cf\", \n               \"Partially Correct\" = \"#f6e8c3\", \n               \"Incorrect\" = \"#ef8a62\")\n  ) +\n  scale_x_continuous(labels = scales::percent) +\n  labs(\n    x = \"Percent\", y = \"Model\",\n    title = \"An R Eval\",\n    subtitle = \"Kimi K2 lags behind many of the models it was likened to\\nin Moonshot AI's release post.\"\n  ) +\n  theme_bw() +\n  theme(\n    panel.border = element_blank(),\n    panel.background = element_rect(fill = \"#f8f8f1\", color = NA),\n    plot.background = element_rect(fill = \"#f8f8f1\", color = NA),\n    legend.background = element_rect(fill = \"#F3F3EE\", color = NA),\n    plot.subtitle = element_text(face = \"italic\"),\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-are-eval-1.png){fig-alt='A horizontal bar chart comparing various AI models\\' performance on R coding tasks. The chart shows percentages of correct (blue), partially correct (beige), and incorrect (orange) answers. Models listed from top to bottom are Kimi K2, Claude 4 Opus, Claude 4 Sonnet, GPT 4.1, GPT 4.1-mini, and Gemini 2.5 Flash. Claude 4 Opus shows the highest proportion of correct answers at approximately 60%, while Kimi K2 sits around 36%.' width=100%}\n:::\n:::\n\n\n\nAt least on this eval, it looks like Kimi K2 is slightly more expensive and slightly worse or comparable to GPT 4.1-mini and Gemini 2.5 Flash, and certainly not a contender with GPT 4.1, Claude 4 Sonnet, or Claude 4 Opus.\n\n## Extra credit(s)\n\nI'm not sure if it was just some weird UI artifact or an intended behavior, but it seemed the minimum amount I could put on a Moonshot API key was $10. So, after spending the 7 cents needed to run this eval, I had some extra runway.\n\nI've recently been working on a yet-to-be-open-sourced agent thing that allows for plugging in different models under the hood. At a high level:\n\n* There are about 20,000 tokens in the prompt, 10,000 of which are attached to one tool.\n* The application relies on 1) strong instruction-following, 2) strong tool usage, and 3) some imagination.\n* There's one tool that is asynchronous in the sense that it returns immediately when called, saying \"Ok, got your inputs, running now,\" but only later returns the actual results of the tool call. I've seen a few models really struggle with this format.\n\nI figured this would be a good context in which to vibe-eval this new model with my leftover credits. The vibes:\n\n* Tokens streamed a good bit more slowly than I'm used to seeing from Claude Sonnet or Gemini 2.5 Pro. (This was on Monday, so presumably much higher usage on the API than Sunday.)\n* The model seems fine-tuned into the \"responses should be unordered lists with bolded labels\" local minimum pretty thoroughly.\n* Tool calling is weak. The model doesn't follow instructions in tool descriptions well or react to error messages reasonably. If I prompt the model to make changes to the way that it's calling a tool myself, it seems to react well.\n\nAltogether, I wouldn't call this an impressive release, and don't anticipate I'll spend much more time with this model.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}