{
  "hash": "f38e6a56b79194005a3199998c3d7e59",
  "result": {
    "markdown": "---\ntitle: \"Analyzing my own music listening data with R and the tidyverse (2023)\"\ndate: '2023-11-30'\ntags:\n  - personal\nsubtitle: \"All of my friends are posting their Spotify Wrapped, and I'm jealous.\"\nimage: featured.png\nsummary: ''\n---\n\n\n\n\nAside from exchanging playlists with my partner every once in a while, I'm not much of a Spotify user. Around this time every year, though, all of my friends start posting their Spotify Wrapped, and I get jealous, as the platform that I listen to music on doesn't have anything like it. Of course, though, it collects data about me (it's 2023!); [last year](https://www.simonpcouch.com/blog/2022-12-01-listening-2022/), I got to wondering whether I could make a lo-fi knockoff of wrapped using R, the tidyverse, and the data that I have access to. You already know:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nIf you're an R user and a listener of local files on the Mac Music app, this post is for you.🎁\n\n## Importing the data\n\nIn the Mac music app, navigate to:\n\n```\nMusic app > File > Library > Export Library\n```\n\n...to export a `.xml` file. [Last year](https://www.simonpcouch.com/blog/2022-12-01-listening-2022/), I griped about how much of a pain in the ass it was to tidy the resulting output. This year, we can all just install [the package I wrote last year](https://github.com/simonpcouch/wrapped) and forget about our woes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npak::pak(\"simonpcouch/wrapped\")\n```\n:::\n\n\nThe wrapped package contains a function, `wrap_library()`, to tidy that .xml file into a tabular data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(wrapped)\n\nwrapped <- wrap_library(\"data/Library.xml\", 2022:2023)\n\nwrapped\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12,545 × 8\n      id track_title         artist album genre date_added skip_count play_count\n   <int> <chr>               <chr>  <chr> <chr> <date>          <dbl>      <dbl>\n 1 11729 Atom                Mediu… Heal… Indi… 2023-02-11         15        234\n 2 11862 Reelin'             Matt … Ever… Indi… 2023-03-24         19        208\n 3 11732 Gimme Back My Soul  Mediu… Heal… Indi… 2023-02-11         11        195\n 4 12179 Swim                Noah … If T… Sing… 2023-07-21         11        191\n 5 11733 Never Learned To D… Mediu… Heal… Indi… 2023-02-11         12        161\n 6 12088 Get The Girl        Seafo… Get … Coun… 2023-06-16         26        159\n 7 11855 Everything's Fine   Matt … Ever… Indi… 2023-03-24         12        153\n 8 11656 Never Learned To D… Mediu… Neve… Indi… 2022-12-26          6        143\n 9 12388 Desert Land         Matt … Dese… Indi… 2023-10-22         11        141\n10 12097 Given               Justi… Dayd… R&B/… 2023-06-16         11        132\n# ℹ 12,535 more rows\n```\n:::\n:::\n\n\nAfter that, Spotify Wrapped is just `group_by() %>% summarize() %>% arrange()` in a trench coat.🧥\n\nFor easier printing in this blog post, I'll rearrange this data to show the most commonly noted output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrapped <- \n  wrapped %>%\n  select(-id) %>%\n  relocate(date_added, skip_count, .after = everything()) %>%\n  relocate(play_count, .before = everything())\n\nwrapped\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12,545 × 7\n   play_count track_title            artist    album genre date_added skip_count\n        <dbl> <chr>                  <chr>     <chr> <chr> <date>          <dbl>\n 1        234 Atom                   Medium B… Heal… Indi… 2023-02-11         15\n 2        208 Reelin'                Matt Cor… Ever… Indi… 2023-03-24         19\n 3        195 Gimme Back My Soul     Medium B… Heal… Indi… 2023-02-11         11\n 4        191 Swim                   Noah Gun… If T… Sing… 2023-07-21         11\n 5        161 Never Learned To Dance Medium B… Heal… Indi… 2023-02-11         12\n 6        159 Get The Girl           Seaforth  Get … Coun… 2023-06-16         26\n 7        153 Everything's Fine      Matt Cor… Ever… Indi… 2023-03-24         12\n 8        143 Never Learned To Dance Medium B… Neve… Indi… 2022-12-26          6\n 9        141 Desert Land            Matt Cor… Dese… Indi… 2023-10-22         11\n10        132 Given                  Justin N… Dayd… R&B/… 2023-06-16         11\n# ℹ 12,535 more rows\n```\n:::\n:::\n\n\n## Analyzing it\n\n### Top songs\n\nThe output is already arranged in descending order by play count, so we can just print the first few rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrapped %>%\n  select(track_title, artist, play_count) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  track_title            artist         play_count\n  <chr>                  <chr>               <dbl>\n1 Atom                   Medium Build          234\n2 Reelin'                Matt Corby            208\n3 Gimme Back My Soul     Medium Build          195\n4 Swim                   Noah Gundersen        191\n5 Never Learned To Dance Medium Build          161\n6 Get The Girl           Seaforth              159\n```\n:::\n:::\n\n\nMedium! Build!\n\n### Top artists\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrapped %>%\n  group_by(artist) %>%\n  summarize(play_count = sum(play_count, na.rm = TRUE)) %>%\n  arrange(desc(play_count)) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  artist         play_count\n  <chr>               <dbl>\n1 Medium Build         1921\n2 Matt Corby           1622\n3 Justin Nozuka        1058\n4 Noah Gundersen        907\n5 Patrick Droney        569\n6 Mac Ayres             546\n```\n:::\n:::\n\n\n`group_by() %>% summarize()`! I told you!\n\nI will fly to Australia to see Matt Corby play live if I have to.\n\n### Top genres\n\nOne of my first steps after buying a new record is to edit it's metadata to fit into one of a few pre-defined genres. Many of these categorizations are sort of silly as a result, but it _does_ make for a nice summary:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrapped %>%\n  group_by(genre) %>%\n  summarize(play_count = sum(play_count, na.rm = TRUE)) %>%\n  arrange(desc(play_count)) %>%\n  head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n  genre                  play_count\n  <chr>                       <dbl>\n1 Indie/Alternative            5337\n2 Singer-Songwriter/Folk       3937\n3 R&B/Soul                     2855\n4 Country                      2258\n5 Indie Pop                     971\n```\n:::\n:::\n\n\nSort of confused by the existence of the \"Indie Pop\" category.`r `emo::ji(\"confused\")` Definitely need to clean up some of those entries.\n\n:::callout-tip\nYou can selectively use the `n` argument to `head()` to hide things that you're embarrassed about.\n:::\n\n### Top albums\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrapped %>%\n  group_by(album, artist) %>%\n  summarize(play_count = sum(play_count, na.rm = TRUE), .groups = \"drop\") %>%\n  arrange(desc(play_count)) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  album                        artist         play_count\n  <chr>                        <chr>               <dbl>\n1 Everything's Fine            Matt Corby           1217\n2 Health - EP                  Medium Build          971\n3 Never Learned To Dance       Medium Build          819\n4 Daydreams and Endless Nights Justin Nozuka         736\n5 If This Is The End           Noah Gundersen        598\n6 Comfortable Enough           Mac Ayres             428\n```\n:::\n:::\n\n\n## Bonus points\n\nThere are a couple summarizations that Wrapped doesn't do that I'm curious about.\n\n### Top song by month\n\nI don't have the right level of observation to see which songs I listened to the most every month, but I _do_ have a variable giving the data I added a given song. We can use that information to find the top songs by month _added_:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrapped %>%\n  mutate(month = month(date_added)) %>%\n  group_by(month) %>%\n  summarize(\n    track_title = track_title[which.max(play_count)], \n    artist = artist[which.max(play_count)]\n  ) %>%\n  head(11)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 11 × 3\n   month track_title            artist           \n   <dbl> <chr>                  <chr>            \n 1     1 Sad Song               Brandon Ratcliff \n 2     2 Atom                   Medium Build     \n 3     3 Reelin'                Matt Corby       \n 4     4 Be Yourself            Wilder Woods     \n 5     5 tennessee is mine      Alana Springsteen\n 6     6 Get The Girl           Seaforth         \n 7     7 Swim                   Noah Gundersen   \n 8     8 You Take The High Road Bruno Major      \n 9     9 Better Days            Noah Gundersen   \n10    10 Desert Land            Matt Corby       \n11    11 PANIC ATTACK           Clinton Kane     \n```\n:::\n:::\n\n\n### Top artist by genre\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrapped %>%\n  group_by(genre, artist) %>%\n  summarize(play_count = sum(play_count, na.rm = TRUE), .groups = \"drop\") %>%\n  group_by(genre) %>%\n  summarize(\n    artist = artist[which.max(play_count)],\n    play_count = play_count[which.max(play_count)]\n  ) %>%\n  arrange(desc(play_count)) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n  genre                  artist            play_count\n  <chr>                  <chr>                  <dbl>\n1 Indie/Alternative      Matt Corby              1459\n2 R&B/Soul               Justin Nozuka           1005\n3 Indie Pop              Medium Build             971\n4 Singer-Songwriter/Folk Noah Gundersen           598\n5 Country                Alana Springsteen        538\n6 Bluegrass              Mighty Poplar            369\n```\n:::\n:::\n\n\n### Moved on\n\nHow many albums in my library did I not listen to at all this year? (I reset the play count for all of my library to zero each time I do this analysis.)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrapped %>%\n  group_by(album, artist) %>%\n  summarize(play_count = sum(play_count, na.rm = TRUE), .groups = \"drop\") %>%\n  filter(play_count == 0) %>%\n  count()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1  1195\n```\n:::\n:::\n\n\nThat number is a _lot_ bigger than I thought.😬\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}